@using Abudantia.Helpers
@using Abudantia.Models
@using Abudantia.Repository;

@rendermode InteractiveServer
@inject ProductRepository ProductRepository;
@inject Cart Cart;

@* @inject ILogger<Navigate> Logger *@

@inject NavigationManager Navigation;
@implements IDisposable;

<button type="button" class="btn btn-primary" id="liveToastBtn" @onclick="Showtoast">Show live toast</button>
<button type="button" class="btn btn-primary" @onclick="GoToCart">Корзина</button>

<div class="container py-5">
    <h3 class="text-center">Catalog</h3>
    <button class="btn btn-primary" @onclick="CreateProduct">Добавить продукт</button>
    @foreach (Product item in Catalog)
    {
        <div class="row row-cols-1 row-cols-md-3 g-4 py-5">
            <div class="col-12 col-md-6 col-lg-4">
                    <CardComponent product="@item" Cart="@Cart"/>
                </div>
        </div>
    }
</div>

@if (toast)
{
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <img src="..." class="rounded me-2" alt="...">
            <strong class="me-auto">Bootstrap</strong>
            <small>11 mins ago</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Hello, world! This is a toast message.
        </div>
    </div>
}
@code {
    [Parameter]
    public List<Product> Catalog { get; set; }

    int productIndex = 0;
    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        productIndex = 0;
        Catalog = await ProductRepository.GetAll()!;
    }

    bool toast = false;
    void Showtoast() =>  toast = !toast;

    void GoToCart() => Navigation.NavigateTo("cart");
    void CreateProduct() => Navigation.NavigateTo("/Products/create");


    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += HandleLocationChanged;
        Catalog = await ProductRepository.GetAll();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        //Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}
